# 第一种类型的注释：加在程序之前，单独一行
# 为了保证代码的可读性，# 后面建议先添加一个空格，然后再编写相应的说明文字

print("代码末位加注释")  # 第二种注释方式，代码末位加注释方式，只能单独一行
# 为了保证代码的可读性，注释和代码之间 至少要有 两个空格
# 建议在代码很短，注释很短的时候使用
"""
第三种注释方式，多行注释/块注释
可以换行进行操作
三对引号成对出现
"""

"""
python有严格的格式校验，为保持代码格式的整齐
会有下滑波浪线提醒，调整格式即可
当有大片格式不对时，可以进行大批量进行格式调整
调整方式：
    鼠标点击格式有问题的代码行货备注行，上方出现黄色小灯泡
    选择Refotmat file ，所有格式不对的都会进行调整
"""

"""
单步执行代码，在代码之前点击，出现红点，点击Debug按钮，点击执行时
可以进行单步执行
python解释器发现有#，默认为注释，注释内容不执行
"""

"""
什么时候需要使用注释？
注释不是越多越好，对于一目了然的代码，不需要添加注释
对于 复杂的操作，应该在操作开始前写上若干行注释
对于 不是一目了然的代码，应在其行尾添加注释（为了提高可读性，注释应该至少离开代码 2 个空格）
绝不要描述代码，假设阅读代码的人比你更懂 Python，他只是不知道你的代码要做什么
在一些正规的开发团队，通常会有 代码审核 的惯例，就是一个团队中彼此阅读对方的代码

关于代码规范
Python 官方提供有一系列 PEP（Python Enhancement Proposals） 文档
其中第 8 篇文档专门针对 Python 的代码格式 给出了建议，也就是俗称的 PEP 8
文档地址：https://www.python.org/dev/peps/pep-0008/
谷歌有对应的中文文档：http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/
任何语言的程序员，编写出符合规范的代码，是开始程序生涯的第一步
"""


